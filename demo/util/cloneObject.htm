<!DOCTYPE HTML>
<html>
  <head>
		<title>cloneObject</title>
		<script type='text/javascript' src='../../util/type.js'></script>
		<script type='text/javascript' src='../../util/cloneObject.js'></script>
	</head>

	<body>
		<script type='text/javascript'>
			/* obj is object */
			var obj = {a:1, b: [2], c: {d: 1}};
			
				/* There are 2 ways to clone an Object, and return a new Object. */
				var obj2 = {z: 1};
				JOY.cloneObject(obj, obj2); 	 	//obj2 is {z:1, a:1, b:[2], c:{d:1}}

				var obj3 = JOY.cloneObject(obj); 	//obj3 is {a:1, b:[2], c:{d:1}}
			
			
			/* obj is array */
			var obj = [1,2,{a: 1}];
			
				/* obj2 is object */
				var obj2 = {z: 1};
				JOY.cloneObject(obj, obj2); //obj2 is {z:1, 0:1, 1:2, 2:{a:1}}
				
				/* obj2 is array */
				var obj2 = [4, 4, 4, 4, 4];
				JOY.cloneObject(obj, obj2); //obj2 is [1, 2, {a:1}, 4, 4]
				
				/* obj2 is num or string or null, return obj2 directly */
				var obj2 = 3;
				JOY.cloneObject(obj, obj2); //obj2 is 3
			
			
			/* if the property name is the same */
			var obj = {a:[1,2,3]};
			var obj2 = {a: [3,4]};
			JOY.cloneObject(obj2, obj);  //obj is {a: [3, 4, 3]}
			
			
			var obj = {a: {a:1, b:2, c:3}};
			var obj2 = {a: {a: 5, b: 6}};
			JOY.cloneObject(obj2, obj);  //obj is {a: {5, 6, 3}}
			
		</script>
	</body>
</html>


/*
	Although we can use slice or concat to copy an array to a new array, but if the item is an Object or Array...
	
	var arr = [{a: 1}, 2];
	var arr2 = arr.slice(0); // or arr.concat()
	arr2[0].a = 7777;
	console.log(arr[0].a);
	
*/
