/*
	'cloneObject' method: copy an Object, return a new Object.
*/

(function(global){
	function cloneObject(obj, clone){
		var name, item, 
		    itemType, objType,
			src, srcType,
		    cloneType = JOY.type(clone),
		    arglen = arguments.length;

		if(arglen === 1 || cloneType === 'object' || cloneType === 'array'){
			if(arglen === 1){
				objType = JOY.type(obj);
				if(objType === 'object' || objType === 'array'){
					clone = (objType === 'object') ? {} : [];
				}
			}

			for(var name in obj){
				item = obj[name];
				itemType = JOY.type(item);
				
				src = clone[name];
				srcType = JOY.type(src);
				
				if(itemType === 'object' || itemType === 'array'){
					if(itemType === 'object'){
						clone[name] = src && srcType === 'object' ? src : {};
					}else{
						clone[name] = src && srcType === 'array' ? src : [];
					}
					
					cloneObject(item, clone[name]);
				}else{
					clone[name] = item;
				}
			}
		}


		return clone;
	}

	global.JOY || (global.JOY = {});
	global.JOY.cloneObject = cloneObject;
})(window);


/*
You also can use 'prototypal Inheritance' to copy an Object.


	function clone(obj){
	    var F = function(){};
	    F.prototype = obj;
	
	    var instance = new F;
	    var name, item, objType;

	    for(name in instance){
	        item = instance[name];
		/* Don't use typeof, because typeof(new Number('2')) is equal to object */
		objType = JOY.type(item);
	        if(objType === 'object' || objType === 'array'){
	            instance[name] = clone(item);
	        }
	    }    
	
	    return instance;
	}
*/
